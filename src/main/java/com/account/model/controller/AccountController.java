package com.account.model.controller;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.CustomDateEditor;
import org.springframework.http.MediaType;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.account.model.dto.Response;
import com.account.model.dto.User;
import com.account.model.service.AccountService;

@CrossOrigin(origins="*",allowedHeaders="*",allowCredentials="true")
@RestController
@RequestMapping("account")
public class AccountController {
	
	@Autowired
	private AccountService service;
	
	@Autowired
	private Response response;
	
//	@InitBinder
//	public void initBinder(WebDataBinder binder) {
//		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
//		CustomDateEditor editor = new CustomDateEditor(format, true);
//		binder.registerCustomEditor(Date.class, editor);
//	}

	
	@PostMapping(path="/register",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
	public Response registerUser(@RequestBody User userInfo) {
		String autogenPassword="U_"+userInfo.getUserName().replace(' ','_').toLowerCase()+(new Random().nextInt(900000)+1000000);
		userInfo.setUserPassword(autogenPassword);
		System.out.println(userInfo.getUserEmail());
		String to=userInfo.getUserEmail();
		String subject = "your password for User Account system login";
		String body = "Welcome Mr/Ms "+userInfo.getUserName().toUpperCase()+"."+" Your Email Id is "+userInfo.getUserEmail()+" and your password is : "+userInfo.getUserPassword()+ ".  It is an autogenerated mail..Please do not Reply..";
		if(service.registerUser(userInfo,to,subject,body)) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("User is added successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not added");
			return response;
		}
	}
	
	
	@GetMapping(path="/login",produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public Response loginUser(@RequestParam("userName") String name,@RequestParam("password") String password,HttpServletRequest request){
		System.out.println("username..."+name);
		System.out.println("password...."+password);
		User user=service.loginUser(name, password);
		if(user!=null) {
			System.out.println("hii");
			request.getSession(true).setAttribute("user", user);
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("User Logged In");
			response.setUser(Arrays.asList(user));
			System.out.println(response);
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("failure");
			response.setDescription("Invalid email or password");
			return response;
		}
		}
		
	
	@PutMapping(path="/update",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
	public Response updateUser(@RequestBody User userInfo,HttpServletRequest request) {
		if(service.updateUser(userInfo)) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("User is updated successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not updated");
			return response;
		}
		
	}
	
	
	@DeleteMapping(path="/remove/{id}",produces=MediaType.APPLICATION_JSON_VALUE)
	public Response deleteUser(@PathVariable("id") int id,HttpServletRequest request) {
		if(service.removeUser(id)) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("User is deleted successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not deleted");
			return response;
		}
		
		}
	
	
	@GetMapping(path="/get-all",produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public Response getAllUsers(HttpServletRequest request){
		List<User> users = service.getAllUsers();
		if(users!=null) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("All  Users List");
			response.setUser(users);
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not present");
			return response;
		}
		
		  
		}

	
}
